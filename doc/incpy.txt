*incpy.txt* Incremental development with Python and more.

Author:  Ali Rizvi-Santiago <arizvisa@gmail.com>

==============================================================================
INTRODUCTION                                    *incpy*

This plugin provides wrappers around buffers and windows in order to facilitate
immediate interaction with another process of some sort. Typically the other
process will be an interpreter, but any process that exchanges data within
standard input, standard output, or standard error can be used. If no process
is configured, the plugin will use the internal python interpreter for the
interaction.

The plugin requires the editor to be compiled with either python2 (|+python|)
or python3 (|+python3|) support (|has-python|). The existence of these
features can be checked by using `has("python")`, `has("python3")`, or
`has("pythonx")`. If terminal support is available in the editor (|+terminal|),
the plugin will use it for running external interpreters. If terminal support
is not supported by the editor, the plugin will still capture all input and
output from the target process to the configured buffer.

Once the plugin has been loaded, any output from the external process or
internal python interpreter will be captured in a buffer for viewing and
editing. To send input input to a target process, various commands are
available which will be transmitted to the standard input of the target.
These commands can also be mapped or bound to a key combination in order to
transmit text that is currently being worked on to the target process.

==============================================================================
USAGE                                           *incpy-usage*

General usage involves selecting the code you want to execute, and then
pressing the correct keybinding in order to execute or evaluate the selected
code. The output of the command will then be captured into a buffer, showing
the window if it isn't currently being displayed. As such, it is worth being
familiar with the window management for your editor.

The following keybindings are mapped to normal and visual mode:

	!		Execute current line or selected text.
	<C-/>		Evaluate expression under cursor or selected text.
	<C-\>		Alternative for terminals that don't support <C-/>.
	<C-@>		Display the help for the word under the cursor.

By default, the plugin will use the internal python interpreter compiled
into the editor. Through configuration, however, any command that reads
from stdin and writes to stdout can be used. Depending on the interpreter,
there may be extra configuration needed in order format the code being
submitted to the target process. Please review the configuration section
for more details.

==============================================================================
INTERPRETERS                                    *incpy-interpreters*

There are three different interpreters that can be chosen depending on the
configuration and the currently available features for the editor. Generally,
the interpreter choice should be completely abstracted away from the user.

Each interpreter is responsible for configuring how text can be submitted to
it and can prepare the environment prior to user interaction.

==============================================================================
INTERPRETERS (internal)                         *incpy-interpreters-internal*

This interpreter utilizes the internal python interpreter that comes compiled
within the editor. If the plugin has not been configured, the default options
will result in this interpreter being chosen. This interpreter does not
display any version information, and is initialized with whatever the editor
chooses.

By default, this interpreter will load the contents of a dotfile from the
user's home directory to initialize its scope. This dotfile can be configured
using the |g:incpy#PythonStartup| if the default is undesired. Please see the
configuration section for more details.

==============================================================================
INTERPRETERS (external)                         *incpy-interpreters-external*

The "external" interpreter spawns a process outside of the editor and
captures its output to present to the user. This interpreter can be chosen
by configuring the "incpy#Program" global variable with the path and
parameters to start the desired process.

It is worth noting that if using a non-python interpreter, configuration for
how text should be formatted when being submitted to the target process will
need to be provided. This involves specifying alternative values for the
global variables: |g:incpy#InputStrip|, |g:incpy#ExecFormat|,
|g:incpy#ExecStrip|, |g:incpy#EvalFormat|, and |g:incpy#EvalStrip|. For more
details on this, please review the |incpy-configuration| section. Some
examples can also be found in the |incpy-configuration-examples| section.

==============================================================================
INTERPRETERS (terminal)                         *incpy-interpreters-terminal*

The "terminal" interpreter is similar to the "external" interpreter in that
it spawns a process outside the editor, and is configured by specifying a
program via the |g:incpy#Program| global variable. This interpreter type is
used by default if the editor has been compiled with the |+terminal| feature.

The only difference between this and the "external" interpreter is that this
interpreter creates its process using the terminal api provided by the editor.
The terminal api provides a "terminal" buffer type as opposed to a regular
buffer which in some cases can be more familiar to the user.

==============================================================================
CONFIGURATION                                   *incpy-configuration*

There are a number of options that are available for the user to configure
this plugin. Generally, these options can be specified in the user's vimrc
which is loaded upon starting the editor.

The first set of options is responsible for customizing how the window is
to be presented to the user. These options are as follows:

	|g:incpy#WindowName| - *string*
	Specify the default name of the interpreter output buffer. By default
	this is set to "`Scratch`".

	|g:incpy#WindowStartup| - *boolean*
	Display the output window for the interpreter upon startup. By default
	this is set to `v:true`.

	|g:incpy#WindowPreview| - *boolean*
	Used to specify that the interpreter output should be displayed within
	a preview window. This is only available if the editor has been
	compiled with the |+quickfix| feature. By default this option is set
	to `v:true`.

	|g:incpy#WindowPosition| - `left`, `right`, `above`, or `below`
	The position to create the window at during execution. The position
	specifies whether the output window should be created by vertically
	or horizontally splitting the current window. By default this is
	set to "`below`".

	|g:incpy#WindowRatio| - *float*
	The ratio of the window size relative to the current window being
	splitted. By default this ratio is set to `0.333333` or `1/3`.

	|g:incpy#WindowFixed| - *bool*
	Specify whether the window width and height should be kept when
	windows are opened or closed. This is responsible for setting the
	|winfixheight| and |winfixwidth| options on the output window.

	|g:incpy#WindowOptions| - *dictionary*
	Customize the options for the window displaying the interpreter
	output. This dictionary is used to set the local window options using
	the |:setlocal| command.

==============================================================================
CONFIGURATION (miscellaneous)                   *incpy-configuration-misc*

The following options are also available to customize the implementation of
the plugin. Generally these options are only used internally, but are listed
here in case the user wishes to tinker with them.

	|g:incpy#PythonStartup| - *string*
	This global variable specifies the path of a dotfile to use for
	initializing the scope of an |incpy-interpreter-internal|. By default
	this will use the value of the |$PYTHONSTARTUP| environment variable,
	or |$HOME/.pythonrc.py| if the environment variable is not available.

	|g:incpy#Terminal| - *boolean*
	This variable is used to configure which external interpreter type
	to use. This will determine whether the |incpy-interpreters-terminal|
	or |incpy-interpreters-external| interpreter is chosen. By default
	this is set to `v:true` if the |+terminal| feature is available in
	the editor.

	|g:incpy#PluginName| - *string*
	This variable is internal and contains the name of the plugin. It is
	only used for logging, but can be configured. By default this is
	specified as "`incpy`".

	|g:incpy#PackageName| - *string*
	This variable is internal and contains a string that is used to
	isolate the implementation of this plugin. It is the name of the
	python module that is used as a scope when executing plugin-related
	functionality. By default this is configured as "`__incpy__`".

	|g:incpy#Greenlets| - *bool*
	This customizes the method that the |incpy-interpreters-external|
	interpreter uses to write asynchronously into its output buffer. This
	is chosen by default based on whether the "`greenlets`" module is
	actually available in the |python| instance for the editor.

==============================================================================
COMMANDS                                        *incpy-commands*

Interaction with the plugin is facilitated by the following commands. These
commands are used by the default keybindings to send the desired code to the
current interpreter. As per the capabilities of the editor, these commands
can be called directly.

	|Py| <string>
	Execute the specified string within the interpreter.

	|PyLine|
	Execute the current lines within the interpreter

	|PyRange|
	Send the specified range to the interpreter.

	|PyBuffer|
	Execute the contents of the entire buffer within the interpreter.

	|PyExecuteRange|
	Execute the specified range within the current interpreter.

	|PyExecuteBlock|
	Execute the currently selected block within the current interpreter.

	|PyExecuteSelection|
	Execute the selected code within the interpreter.

	|PyEval| <string>
	Evaluate the expression specified as a string.

	|PyEvalRange|
	Evaluate the specified range within the current interpreter.

	|PyEvalBlock|
	Evaluate the currently selected block within the interpreter.

	|PyEvalSelection|
	Evaluate the currently selected code within the interpreter.

	|PyHelp| <string>
	View the python help with the specified string.

	|PyHelpSelection|
	View the python help for the currently selected text.

==============================================================================
PUBLIC API                                      *incpy-functions-public*

This plugin provides a number of functions to the user which can be used
to customize or script the interaction with their interpreter.

The following functions are available to the user:

	incpy#ExecuteFile(filename)

	incpy#Start()
	incpy#Stop()
	incpy#Restart()
	incpy#Show()
	incpy#Hide()

	incpy#Execute(line)
	incpy#ExecuteRange() range
	incpy#ExecuteBlock() range
	incpy#ExecuteSelected() range
	incpy#Range(begin, end)

	incpy#Evaluate(expr)
	incpy#EvaluateRange() range
	incpy#EvaluateBlock() range
	incpy#EvaluateSelected() range

	incpy#Halp(expr)
	incpy#HalpSelected() range


==============================================================================
PRIVATE (internal)                              *incpy-functions-private*

The setup of an interpreter at startup is done with the following functions.
These are intended to be used internally, but can be useful if the user
wishes to interfere with the normal startup of the plugin.

	incpy#SetupPackageLoader(package, path)
	incpy#SetupInterpreter(package)
	incpy#SetupInterpreterView(package)
	incpy#SetupOptions()
	incpy#SetupPythonLoader(package, currentscriptpath)
	incpy#SetupPythonInterpreter(package)
	incpy#SetupCommands()
	incpy#SetupKeys()
	incpy#ImportDotfile()
	incpy#LoadPlugin()

==============================================================================
HISTORY

    v24:    Oct, 2024   Rewrote the window management so that it uses an
                        identifier rather than tab and window number. Adder
                        this documentation...after all this time.
    v23:    Jul, 2024   Refactored the plugin layout so that the python
                        logic is better isolated from the vimscript logic.
                        This cleans up the python containing the buffer,
                        window, and process management with the addition of
                        splitting up the vimscript into separate components.
    v22:    Aug, 2023   Modified the options for configuring how text should
                        be stripped before being transmitted so that it can
                        take function and list types instead of a regex.
    v21:    Feb, 2023   Modified the expression evaluation so that all text
                        is encoded before it gets sent to the target.
    v20:    Jan, 2023   Added support for disabling the paging used by the
                        help for the internal python interpreter and a new
                        interpreter type that uses the terminal if vim says
                        the feature is available.
    v19:    Dec, 2022   Added support for configuring the way that text is
                        stripped before executing it in the target.
    v18:    Dec, 2021   Ensure that the PYTHONSTARTUP script is executed upon
                        initializing the plugin with the internal interpreter.
    v17:    Aug, 2020   Added support for recreating the output buffer if
                        it has been accidentally removed by the user.
    v16:    Jul, 2020   Fixed current expression identification to support
                        older versions of vim, added an alternative binding
                        for vim on the windows platform, and reworked the
                        error handling to support vim's usage of both
                        new-style and old-style exceptions.
    v15:    Apr, 2020   Modified the monitor class to use bytes exclusively
                        and added support for using alternative encodings.
    v14:    Nov, 2019   Added support for compatibility with python3.
    v13:    Dec, 2018   Added support for customizing the format used when
                        asking the target process for help. Split up the
                        concept of execution between expression evaluation
                        and line-based. Changed keyboard mappings to avoid
                        conflicting with other useful plugins.
    v12:    Oct, 2018   Added the ability to configure how input should be
                        formatted before transmitting, and options for
                        configuring the locking mechanism to use when
                        updating the output buffer for the target process.
    v11:    Jun, 2018   Added guards to avoid adding entries to the jumplist
                        when when tailing the output window for a process.
    v10:    Feb, 2017   Added support for lightweight threads (greenlets)
                        when capturing output from an external process.
    v9:     Jun, 2016   Added support for multithreading to allow the
                        external process to read and write to a vim buffer
                        as it is currently being used.
    v8:     Oct, 2015   Refactored the interface for managing a process,
                        and updated it so that it can take input from
                        either a generator or a callable.
    v7:     Jan, 2015   Added separate interpreter types for distinguishing
                        between executing internal or external processes.
                        Reworked the implementation to hide it within a
                        dynamically-created module instead of a closure.
    v6:     Oct, 2014   Refactored the python class for monitoring the target
                        in order to allow its usage outside the plugin.
    v5:     Sep, 2014   Added support for the "clientserver" feature so that
                        asynchronous buffer updates are shoveled through
                        a pipe reducing the risk of races causing instability.
    v4:     May, 2014   Migrated all related scripts and hackery from their
                        dotfiles into their own source code repository.
    v3:     ~2011       Added support for transmitting selected text to a
                        configured external language interpreter.
    v2:     ~2008       Added more options to customize window placement.
    v1:     ~2007       Added support for autohiding the output window and
                        tailing the window when its buffer has been written.
    v0:     ~2005       Prototype based on an idea that bniemczyk@gmail.com
                        and I had during some conversation about Emacs' SLIME
                        (slime-mode) now at https://slime.common-lisp.dev.

==============================================================================
14. Credits

    Thanks to Bram Moolenar and Vim's contributors for maintaining this
    editor longer than I've been alive.

    Thanks to the maintainers of Emacs and SLIME (slime-mode) for inspiration.
    Thanks to ccliver@gmail.org for much of his input on this plugin.
    Thanks to Tim Pope <vimNOSPAM@tpope.info> for pointing out preview windows.

