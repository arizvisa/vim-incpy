*incpy.txt* Incremental development with Python and more.

Author:  Ali Rizvi-Santiago <arizvisa@gmail.com>

==============================================================================
INTRODUCTION                                    *incpy*

This plugin provides wrappers around buffers and windows in order to facilitate
immediate interaction with another process of some sort. Typically the other
process will be an interpreter, but any process that exchanges data within
standard input, standard output, or standard error can be used. If no process
is configured, the plugin will use the internal python interpreter for the
interaction.

The plugin requires Vim to be compiled with python2 or python3 support. The
support of this feature can be checked by using has("python"), has("python3"),
or has("pythonx"). If terminal support is available in the editor, the plugin
will use it for running external interpreters from the editor. If terminal
support is not supported by the editor, the plugin will still capture all
input and output from the target process to the configured buffer.

Once the plugin has been loaded, any output from the external process or
internal python interpreter will be captured in a buffer for viewing and
editing. To send input input to a target process, various commands are
available which will be transmitted to the standard input of the target.
These commands can also be mapped or bound to a key combination in order to
transmit text that is currently being worked on to the target process.

==============================================================================
COMMANDS                                        *incpy-commands*

==============================================================================
HISTORY

    v29:    ~2024       Added this documentation.. after all of this time.
    v28:    ~2024       Refactored the plugin layout so that the python
                        logic is better isolated from the vimscript logic.
                        This cleans up the python containing the buffer,
                        window, and process management with the addition of
                        splitting up the vimscript into separate components.
    v27:    ~2024       Modified the expression evaluation so that all text
                        is encoded before it gets sent to the target.
    v26:    ~2024       Modified the expression evaluation so that all text
                        is encoded before it gets sent to the target.
    v25:    ~2023       Added support for disabling the paging used by the
                        help for the internal python interpreter.
    v24:    ~2023       Added a new interpreter type that supports using the
                        terminal if vim says that the feature is available.
    v23:    ~2022       Added support for configuring the way that text is
                        stripped before executing it in the target.
    v22:    ~2021       Ensure that the PYTHONSTARTUP script is executed upon
                        initializing the plugin with the internal interpreter.
    v21:    ~2020       Fixed current expression identification to support
                        older versions of vim, and added an alternative
                        binding for supporting vim on the windows platform.
    v20:    ~2020       Added support for recreating the output buffer if
                        it has been accidentally removed by the user.
    v19:    ~2020       Reworked the error handling to support vim's usage of
                        both new-style and old-style exceptions.
    v18:    ~2020       Modified the monitor class to use bytes exclusively
                        and added support for using alternative encodings.
    v17:    ~2019       Added support for compatibility with python3.
    v16:    ~2018       Changed the default keyboard mappings to avoid
                        potential conflicts with other useful plugins.
    v15:    ~2018       Split up the concept of execution between expression
                        evaluation and line-by-line execution.
    v14:    ~2018       Added options for configuring the locking mechanism
                        to use when asynchronously updating the output buffer.
    v13:    ~2018       Added support for customizing the format used when
                        asking the target process for help.
    v12:    ~2018       Added the ability to configure how input should be
                        formatted before transmitting to the target process.
    v11:    ~2017       Added guards to avoid adding entries to the jumplist
                        when when tailing the output window for a process.
    v10:    ~2017       Added support for lightweight threads (greenlets)
                        when capturing output from an external process.
    v9:     ~2016       Added support for multithreading to allow the
                        external process to read and write to a vim buffer
                        as it is currently being used.
    v8:     ~2015       Updated the class used for exchanging output with
                        a target process so that it can take input from
                        either a generator or callable.
    v7:     ~2015       Added public interface for managing process.
                        Reworked the implementation to hide it within a
                        dynamically-created module instead of a closure.
    v6:     ~2015       Added separate interpreter types for distinguishing
                        between executing internal or external processes.
    v5:     ~2014       Refactored the python class for monitoring the target
                        in order to allow its usage outside the plugin.
    v4:     ~2014       Moved from a hack-up dotfile into its own repository.
    v3:     ~2011       Added support for external language interpreters.
    v2:     ~2008       Added more options to configure window placement.
    v1:     ~2007       Added support for autohiding the output window and
                        tailing the window when its buffer has been written.
    v0:     ~2005       Prototype based on an idea that bniemczyk@gmail.com
                        and I had during some conversation about Emacs' SLIME
                        (slime-mode) now at https://slime.common-lisp.dev.

==============================================================================
14. Credits

    Thanks to Bram Moolenar and Vim's contributors for maintaining this
    editor longer than I've been alive.

    Thanks to the maintainers of Emacs and SLIME (slime-mode) for inspiration.
    Thanks to ccliver@gmail.org for much of his input on this plugin.
    Thanks to Tim Pope <vimNOSPAM@tpope.info> for pointing out preview windows.

